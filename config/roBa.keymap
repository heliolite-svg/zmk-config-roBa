#include <input/processors.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 4

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

&trackball {
    automouse-layer = <4>;
    scroll-layers = <5>;

    // arrows {
    //     layers = <3>;
    //     bindings =
    //         <&kp RIGHT_ARROW>,
    //         <&kp LEFT_ARROW>,
    //         <&kp UP_ARROW>,
    //         <&kp DOWN_ARROW>;
    //     tick = <10>;
    //     wait-ms = <5>;
    //     tap-ms = <5>;
    // };
};

&mkp_input_listener { input-processors = <&zip_temp_layer 4 250>; };

/ {
    combos {
        compatible = "zmk,combos";

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
            layers = <6>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };

        esc {
            bindings = <&kp_exit_AML ESCAPE>;
            key-positions = <0 1>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };

        exit_AML: exit_AML {
            compatible = "zmk,behavior-macro";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <0>;
            bindings = <&tog_off MOUSE>;
            label = "exit_AML";
        };

        kp_exit_AML: kp_exit_AML {
            compatible = "zmk,behavior-macro-one-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <1>;
            bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER &exit_AML>;
            label = "KP_exit_AML";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        tog_off: toggle_layer_off {
            compatible = "zmk,behavior-toggle-layer";
            #binding-cells = <1>;
            display-name = "Toggle Layer Off";
            toggle-mode = "off";
        };

        mt_exit_AML_on_tap: mt_exit_AML_on_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_exit_AML_ON_TAP";
            bindings = <&kp>, <&kp_exit_AML>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            quick-tap-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp_exit_AML Q               &kp_exit_AML L  &kp_exit_AML U  &kp_exit_AML COMMA           &kp_exit_AML DOT                                                               &kp_exit_AML F  &kp_exit_AML W  &kp_exit_AML R      &kp_exit_AML Y  &kp_exit_AML P
&mt LCTRL E                  &kp_exit_AML I  &kp_exit_AML A  &kp_exit_AML O               &kp_exit_AML MINUS  &kp_exit_AML LS(LG(S))             &kp_exit_AML MINUS      &kp_exit_AML K  &kp_exit_AML T  &lt_to_layer_0 5 N  &kp_exit_AML S  &lt_to_layer_0 5 H
&mt_exit_AML_on_tap LSHFT Z  &kp_exit_AML X  &kp_exit_AML C  &kp_exit_AML V               &kp_exit_AML SEMI   &kp_exit_AML COLON                 &kp_exit_AML SEMICOLON  &kp_exit_AML G  &kp_exit_AML D  &kp_exit_AML M      &kp_exit_AML J  &mt_exit_AML_on_tap RSHFT B
&kp LCTRL                    &kp LEFT_WIN    &kp LEFT_ALT    &lt_to_layer_0 6 INT_HENKAN  &lt 1 SPACE         &lt_to_layer_0 2 INT_MUHENKAN      &kp BACKSPACE           &lt 3 ENTER                                                         &kp DEL
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PAGE_DOWN>;
        };

        Symbol {
            bindings = <
&kp_exit_AML EXCLAMATION   &kp_exit_AML AT_SIGN  &kp_exit_AML HASH  &kp_exit_AML DOLLAR  &kp_exit_AML PERCENT                      &kp_exit_AML CARET         &kp_exit_AML AMPERSAND      &kp_exit_AML ASTERISK   &kp_exit_AML LEFT_PARENTHESIS  &kp_exit_AML RIGHT_PARENTHESIS
&trans                     &trans                &trans             &trans               &trans                &trans      &trans  &kp_exit_AML LEFT_BRACKET  &kp_exit_AML RIGHT_BRACKET  &kp_exit_AML BACKSLASH  &kp_exit_AML MINUS             &kp_exit_AML EQUAL
&mt LEFT_SHIFT LEFT_SHIFT  &trans                &trans             &trans               &trans                &trans      &trans  &kp_exit_AML COLON         &kp_exit_AML DOUBLE_QUOTES  &kp_exit_AML COMMA      &kp_exit_AML PERIOD            &mt RIGHT_SHIFT BACKSLASH
&trans                     &trans                &trans             &trans               &trans                &trans      &trans  &trans                                                                                                        &trans
            >;
        };

        NUM {
            bindings = <
&kp_exit_AML F1     &kp_exit_AML F2   &kp_exit_AML F3   &kp_exit_AML F4   &kp_exit_AML F5                                                    &kp_exit_AML NUMBER_1  &kp_exit_AML NUMBER_2  &kp_exit_AML NUMBER_3  &kp_exit_AML NUMBER_0  &trans
&kp_exit_AML F6     &kp_exit_AML F7   &kp_exit_AML F8   &kp_exit_AML F9   &kp_exit_AML F10  &kp LC(LA(KP_NUMBER_0))      &trans              &kp_exit_AML NUMBER_4  &kp_exit_AML NUMBER_5  &kp_exit_AML NUMBER_6  &kp_exit_AML PLUS      &kp_exit_AML MINUS
&mt LEFT_SHIFT F11  &kp_exit_AML F12  &kp_exit_AML F13  &kp_exit_AML F14  &kp_exit_AML F15  &trans                       &trans              &kp_exit_AML NUMBER_7  &kp_exit_AML NUMBER_8  &kp_exit_AML NUMBER_9  &kp_exit_AML MINUS     &mt RIGHT_SHIFT SLASH
&trans              &trans            &trans            &trans            &trans            &trans                       &kp_exit_AML MINUS  &kp_exit_AML PERIOD                                                                         &trans
            >;
        };

        Move {
            bindings = <
&kp ESCAPE      &kp LC(LS(TAB))         &kp UP_ARROW    &kp LC(TAB)              &trans                       &kp_exit_AML C_AC_DESKTOP_SHOW_ALL_WINDOWS  &kp_exit_AML LG(LC(LEFT_ARROW))  &kp_exit_AML UP_ARROW    &kp_exit_AML LG(LC(RIGHT))  &kp_exit_AML C_AC_DESKTOP_SHOW_ALL_APPLICATIONS
&kp HOME        &kp LEFT_ARROW          &kp DOWN_ARROW  &kp RIGHT_ARROW          &kp END  &trans      &trans  &kp_exit_AML HOME                           &kp_exit_AML LEFT                &kp_exit_AML DOWN_ARROW  &kp_exit_AML RIGHT          &kp_exit_AML END
&kp LEFT_SHIFT  &kp LG(LS(LEFT_ARROW))  &trans          &kp LG(LS(RIGHT_ARROW))  &trans   &trans      &trans  &trans                                      &mkp MB4                         &trans                   &mkp MB5                    &trans
&trans          &trans                  &trans          &trans                   &trans   &trans      &trans  &trans                                                                                                                            &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1  &mkp MB3  &mkp MB2  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        Connect {
            bindings = <
&trans  &trans        &trans        &trans        &trans                                &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans  &sys_reset       &sys_reset   &trans        &trans        &trans        &trans        &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &bootloader      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans        &trans        &trans        &trans  &trans           &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
