#include <input/processors.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 5

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

&trackball {
    automouse-layer = <5>;
    scroll-layers = <6>;

    // arrows {
    //     layers = <3>;
    //     bindings =
    //         <&kp RIGHT_ARROW>,
    //         <&kp LEFT_ARROW>,
    //         <&kp UP_ARROW>,
    //         <&kp DOWN_ARROW>;
    //     tick = <10>;
    //     wait-ms = <5>;
    //     tap-ms = <5>;
    // };
};

&mkp_input_listener { input-processors = <&zip_temp_layer 5 250>; };

/ {
    combos {
        compatible = "zmk,combos";

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
            layers = <7>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };

        esc {
            bindings = <&kp_exit_AML ESCAPE>;
            key-positions = <0 1>;
        };

        next {
            bindings = <&kp A>;
            key-positions = <6 8>;
            layers = <6>;
        };

        layer6 {
            bindings = <&mo 7>;
            key-positions = <40 41>;
        };

        layerntniao {
            bindings = <&mo 7>;
            key-positions = <38 39>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };

        exit_AML: exit_AML {
            compatible = "zmk,behavior-macro";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <0>;
            bindings = <&tog_off 6>;
            label = "exit_AML";
        };

        kp_exit_AML: kp_exit_AML {
            compatible = "zmk,behavior-macro-one-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <1>;
            bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER &exit_AML>;
            label = "KP_exit_AML";
        };

        mt_exit_AML: mt_exit_AML {
            compatible = "zmk,behavior-macro-one-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <1>;
            bindings = <&exit_AML &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "MT_exit_AML";
        };

        bt_0: bt_linux {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&tog_off 8>,
                <&macro_wait_time 200>,
                <&bt BT_SEL 0>,
                <&macro_wait_time 500>,
                <&tog_on 0>;

            label = "BT_LINUX";
        };

        bt_1: bt_1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&tog_off 8>,
                <&macro_wait_time 200>,
                <&bt BT_SEL 1>,
                <&macro_wait_time 500>,
                <&tog_on 8>;

            label = "BT_1";
        };

        layer_0: layer_0 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&tog_off 8>, <&macro_wait_time 200>, <&tog_on 0>;

            label = "LAYER_0";
        };

        layer_l: layer_l {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&tog_off 8>, <&macro_wait_time 200>, <&tog_on 8>;

            label = "LAYER_L";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        tog_on: toggle_layer_on_only {
            compatible = "zmk,behavior-toggle-layer";
            #binding-cells = <1>;
            display-name = "Toggle Layer On";
            toggle-mode = "on";
        };

        tog_off: toggle_layer_off {
            compatible = "zmk,behavior-toggle-layer";
            #binding-cells = <1>;
            display-name = "Toggle Layer Off";
            toggle-mode = "off";
        };

        mt_exit_AML_on_tap: mt_exit_AML_on_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_exit_AML_ON_TAP";
            bindings = <&kp>, <&kp_exit_AML>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            quick-tap-ms = <200>;
        };

        mt_exit_AML_: mt_exit_AML {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_exit_AML";
            bindings = <&mo>, <&mt_exit_AML>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            quick-tap-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp_exit_AML Q               &kp_exit_AML L  &kp_exit_AML U  &kp_exit_AML COMMA           &kp_exit_AML DOT                                                        &kp_exit_AML F          &kp_exit_AML W  &kp_exit_AML R  &kp_exit_AML Y  &kp_exit_AML P
&mt LCTRL E                  &kp_exit_AML I  &kp_exit_AML A  &kp_exit_AML O               &kp_exit_AML MINUS  &kp_exit_AML LS(LG(S))      &kp_exit_AML MINUS      &kp_exit_AML K          &kp_exit_AML T  &kp N           &kp_exit_AML S  &lt 6 H
&mt_exit_AML_on_tap LSHFT Z  &kp_exit_AML X  &kp_exit_AML C  &kp_exit_AML V               &kp_exit_AML SEMI   &kp_exit_AML COLON          &kp_exit_AML SEMICOLON  &kp_exit_AML G          &kp_exit_AML D  &kp_exit_AML M  &kp_exit_AML J  &mt_exit_AML_on_tap RSHFT B
&kp LCTRL                    &kp LEFT_WIN    &kp LEFT_ALT    &lt_to_layer_0 1 LANGUAGE_2  &lt 2 SPACE         &lt_to_layer_0 3 LANG1      &kp BACKSPACE           &lt_to_layer_0 4 ENTER                                                  &kp DEL
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PAGE_DOWN>;
        };

        code {
            bindings = <
&trans          &trans  &trans  &trans  &trans                                 &trans         &trans        &kp LA(UP_ARROW)  &kp LC(SLASH)  &trans
&kp LEFT_SHIFT  &trans  &trans  &trans  &trans  &trans      &trans             &trans         &kp LC(LEFT)  &kp LA(DOWN)      &kp LC(RIGHT)  &trans
&trans          &trans  &trans  &trans  &trans  &trans      &trans             &trans         &trans        &trans            &trans         &trans
&trans          &trans  &trans  &trans  &trans  &trans      &kp LC(BACKSPACE)  &kp LC(ENTER)                                                 &trans
            >;
        };

        Symbol {
            bindings = <
&kp_exit_AML EXCLAMATION   &kp_exit_AML AT_SIGN  &kp_exit_AML HASH  &kp_exit_AML DOLLAR  &kp_exit_AML PERCENT                      &kp_exit_AML CARET  &kp_exit_AML AMPERSAND  &kp_exit_AML ASTERISK  &kp_exit_AML LEFT_PARENTHESIS  &kp_exit_AML RIGHT_PARENTHESIS
&mt LSHFT EXCLAMATION      &kp AT                &kp HASH           &kp DOLLAR           &kp PERCENT           &trans      &trans  &kp MINUS           &kp SEMICOLON           &kp SINGLE_QUOTE       &kp_exit_AML LEFT_BRACKET      &mt RSHIFT RIGHT_BRACKET
&mt LEFT_SHIFT LEFT_SHIFT  &trans                &trans             &trans               &trans                &trans      &trans  &kp EQUAL           &kp SLASH               &kp BACKSLASH          &kp_exit_AML COMMA             &mt RIGHT_SHIFT PERIOD
&trans                     &trans                &trans             &trans               &trans                &trans      &trans  &trans                                                                                            &trans
            >;
        };

        Move {
            bindings = <
&kp ESCAPE      &trans          &kp UP_ARROW    &trans           &trans                       &trans    &trans    &kp UP_ARROW    &trans     &kp ESCAPE
&kp HOME        &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp END  &trans      &trans  &kp HOME  &kp LEFT  &kp DOWN_ARROW  &kp RIGHT  &kp END
&kp LEFT_SHIFT  &trans          &trans          &trans           &trans   &trans      &trans  &trans    &trans    &trans          &trans     &kp RSHIFT
&trans          &trans          &trans          &trans           &trans   &trans      &trans  &trans                                         &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        num {
            bindings = <
&trans             &trans              &kp_exit_AML NUMBER_1  &kp_exit_AML NUMBER_2  &kp_exit_AML NUMBER_3                                       &kp F1   &kp F2   &kp F3   &kp F4   &kp F5
&kp_exit_AML PLUS  &kp_exit_AML N0     &kp_exit_AML NUMBER_4  &kp_exit_AML N5        &kp_exit_AML NUMBER_6  &kp LC(LA(KP_NUMBER_0))      &trans  &kp F6   &kp F7   &kp F8   &kp F9   &kp F10
&kp LEFT_SHIFT     &kp_exit_AML MINUS  &kp_exit_AML N7        &kp_exit_AML N8        &kp_exit_AML N9        &trans                       &trans  &kp F11  &kp F12  &kp F13  &kp F14  &mt RIGHT_SHIFT F15
&trans             &trans              &trans                 &trans                 &kp MINUS              &kp PERIOD                   &trans  &trans                              &trans
            >;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &kp LC(LS(TAB))     &kp LC(T)  &kp LC(TAB)    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1            &mkp MB3   &mkp MB2       &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &kp LA(LEFT_ARROW)  &kp LC(W)  &kp LA(RIGHT)  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                                &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        Connect {
            bindings = <
&trans  &trans        &trans        &trans        &trans                                &bt_0     &bt_1     &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans  &sys_reset       &sys_reset   &layer_0  &layer_l  &trans        &trans        &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &bootloader      &bootloader  &trans    &trans    &trans        &trans        &bt BT_CLR
&trans  &trans        &trans        &trans        &trans  &trans           &trans       &trans                                          &bt BT_CLR_ALL
            >;
        };

        layer_8 {
            bindings = <
&kp_exit_AML Q               &kp_exit_AML L  &kp_exit_AML U  &kp_exit_AML COMMA             &kp_exit_AML DOT                                                             &kp_exit_AML F          &kp_exit_AML W  &kp_exit_AML R  &kp_exit_AML Y  &kp_exit_AML P
&mt LCTRL E                  &kp_exit_AML I  &kp_exit_AML A  &kp_exit_AML O                 &kp_exit_AML MINUS  &kp_exit_AML LS(LG(S))           &kp_exit_AML MINUS      &kp_exit_AML K          &kp_exit_AML T  &kp N           &kp_exit_AML S  &lt 6 H
&mt_exit_AML_on_tap LSHFT Z  &kp_exit_AML X  &kp_exit_AML C  &kp_exit_AML V                 &kp_exit_AML SEMI   &kp_exit_AML COLON               &kp_exit_AML SEMICOLON  &kp_exit_AML G          &kp_exit_AML D  &kp_exit_AML M  &kp_exit_AML J  &mt_exit_AML_on_tap RSHFT B
&kp LCTRL                    &kp LEFT_WIN    &kp LEFT_ALT    &lt_to_layer_0 1 INT_MUHENKAN  &lt 2 SPACE         &lt_to_layer_0 3 INT_HENKAN      &kp BACKSPACE           &lt_to_layer_0 4 ENTER                                                  &kp DEL
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PAGE_DOWN>;
        };
    };
};
